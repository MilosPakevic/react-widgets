{"id":"jiDZ","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\package.json","includedInParent":true,"mtime":1640596614404},{"name":"tslib","loc":{"line":1,"column":40},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\common\\mergeDeep.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\tslib\\tslib.es6.js"},{"name":"./objects.js","loc":{"line":2,"column":32},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\common\\mergeDeep.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\common\\objects.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeepMerger = void 0;\nexports.mergeDeep = mergeDeep;\nexports.mergeDeepArray = mergeDeepArray;\n\nvar _tslib = require(\"tslib\");\n\nvar _objects = require(\"./objects.js\");\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction mergeDeep() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return mergeDeepArray(sources);\n}\n\nfunction mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n\n  if (count > 1) {\n    var merger = new DeepMerger();\n\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n\n  return target;\n}\n\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\n\nvar DeepMerger = function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n\n    this.reconciler = reconciler;\n    this.isObject = _objects.isNonNullObject;\n    this.pastCopies = new Set();\n  }\n\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n\n    var context = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n\n    if ((0, _objects.isNonNullObject)(source) && (0, _objects.isNonNullObject)(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, (0, _tslib.__spreadArray)([target, source, sourceKey], context, false));\n\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n\n    return source;\n  };\n\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if ((0, _objects.isNonNullObject)(value)) {\n      if (this.pastCopies.has(value)) {\n        if (!Object.isFrozen(value)) return value;\n        this.pastCopies.delete(value);\n      }\n\n      if (Array.isArray(value)) {\n        value = value.slice(0);\n      } else {\n        value = (0, _tslib.__assign)({\n          __proto__: Object.getPrototypeOf(value)\n        }, value);\n      }\n\n      this.pastCopies.add(value);\n    }\n\n    return value;\n  };\n\n  return DeepMerger;\n}();\n\nexports.DeepMerger = DeepMerger;"},"sourceMaps":null,"error":null,"hash":"f421fbe07c4eee91135636fb846075ba","cacheData":{"env":{}}}