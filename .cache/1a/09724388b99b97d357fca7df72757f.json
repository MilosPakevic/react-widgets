{"id":"RkFS","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\react\\hooks\\package.json","includedInParent":true,"mtime":1640596614331},{"name":"tslib","loc":{"line":1,"column":40},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\react\\hooks\\useLazyQuery.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\tslib\\tslib.es6.js"},{"name":"react","loc":{"line":2,"column":49},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\react\\hooks\\useLazyQuery.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\react\\index.js"},{"name":"./useQuery.js","loc":{"line":3,"column":25},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\react\\hooks\\useLazyQuery.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\react\\hooks\\useQuery.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLazyQuery = useLazyQuery;\n\nvar _tslib = require(\"tslib\");\n\nvar _react = require(\"react\");\n\nvar _useQuery = require(\"./useQuery.js\");\n\nvar EAGER_METHODS = ['refetch', 'fetchMore', 'updateQuery', 'startPolling', 'subscribeToMore'];\n\nfunction useLazyQuery(query, options) {\n  var _a = (0, _react.useState)({\n    called: false,\n    resolves: []\n  }),\n      execution = _a[0],\n      setExecution = _a[1];\n\n  var execute = (0, _react.useCallback)(function (executeOptions) {\n    var resolve;\n    var promise = new Promise(function (resolve1) {\n      return resolve = resolve1;\n    });\n    setExecution(function (execution) {\n      if (execution.called) {\n        result && result.refetch(executeOptions === null || executeOptions === void 0 ? void 0 : executeOptions.variables);\n      }\n\n      return {\n        called: true,\n        resolves: (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], execution.resolves, true), [resolve], false),\n        options: executeOptions\n      };\n    });\n    return promise;\n  }, []);\n  var result = (0, _useQuery.useQuery)(query, (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, options), execution.options), {\n    fetchPolicy: execution.called ? options === null || options === void 0 ? void 0 : options.fetchPolicy : 'standby',\n    skip: undefined\n  }));\n  (0, _react.useEffect)(function () {\n    var resolves = execution.resolves;\n\n    if (!result.loading && resolves.length) {\n      setExecution(function (execution) {\n        return (0, _tslib.__assign)((0, _tslib.__assign)({}, execution), {\n          resolves: []\n        });\n      });\n      resolves.forEach(function (resolve) {\n        return resolve(result);\n      });\n    }\n  }, [result, execution]);\n\n  if (!execution.called) {\n    result = (0, _tslib.__assign)((0, _tslib.__assign)({}, result), {\n      loading: false,\n      data: void 0,\n      error: void 0,\n      called: false\n    });\n\n    var _loop_1 = function (key) {\n      var method = result[key];\n\n      result[key] = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        setExecution(function (execution) {\n          return (0, _tslib.__assign)((0, _tslib.__assign)({}, execution), {\n            called: true\n          });\n        });\n        return method.apply(void 0, args);\n      };\n    };\n\n    for (var _i = 0, EAGER_METHODS_1 = EAGER_METHODS; _i < EAGER_METHODS_1.length; _i++) {\n      var key = EAGER_METHODS_1[_i];\n\n      _loop_1(key);\n    }\n  }\n\n  return [execute, result];\n}"},"sourceMaps":null,"error":null,"hash":"d0c04be3134e5cb8c739f322eec73669","cacheData":{"env":{}}}