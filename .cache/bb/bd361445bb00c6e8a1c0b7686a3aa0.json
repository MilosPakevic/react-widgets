{"id":"jhba","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\package.json","includedInParent":true,"mtime":1640596613181},{"name":"../../jsutils/keyMap.mjs","loc":{"line":1,"column":23},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\rules\\ValuesOfCorrectTypeRule.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\keyMap.mjs"},{"name":"../../jsutils/inspect.mjs","loc":{"line":2,"column":24},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\rules\\ValuesOfCorrectTypeRule.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\inspect.mjs"},{"name":"../../jsutils/didYouMean.mjs","loc":{"line":3,"column":27},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\rules\\ValuesOfCorrectTypeRule.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\didYouMean.mjs"},{"name":"../../jsutils/suggestionList.mjs","loc":{"line":4,"column":31},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\rules\\ValuesOfCorrectTypeRule.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\suggestionList.mjs"},{"name":"../../error/GraphQLError.mjs","loc":{"line":5,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\rules\\ValuesOfCorrectTypeRule.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\error\\GraphQLError.mjs"},{"name":"../../language/printer.mjs","loc":{"line":6,"column":22},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\rules\\ValuesOfCorrectTypeRule.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\printer.mjs"},{"name":"../../type/definition.mjs","loc":{"line":15,"column":7},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\rules\\ValuesOfCorrectTypeRule.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\definition.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValuesOfCorrectTypeRule = ValuesOfCorrectTypeRule;\n\nvar _keyMap = require(\"../../jsutils/keyMap.mjs\");\n\nvar _inspect = require(\"../../jsutils/inspect.mjs\");\n\nvar _didYouMean = require(\"../../jsutils/didYouMean.mjs\");\n\nvar _suggestionList = require(\"../../jsutils/suggestionList.mjs\");\n\nvar _GraphQLError = require(\"../../error/GraphQLError.mjs\");\n\nvar _printer = require(\"../../language/printer.mjs\");\n\nvar _definition = require(\"../../type/definition.mjs\");\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nfunction ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = (0, _definition.getNullableType)(context.getParentInputType());\n\n      if (!(0, _definition.isListType)(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = (0, _definition.getNamedType)(context.getInputType());\n\n      if (!(0, _definition.isInputObjectType)(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = (0, _keyMap.keyMap)(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      for (var _i = 0, _Object$values = Object.values(type.getFields()); _i < _Object$values.length; _i++) {\n        var fieldDef = _Object$values[_i];\n        var fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && (0, _definition.isRequiredInputField)(fieldDef)) {\n          var typeStr = (0, _inspect.inspect)(fieldDef.type);\n          context.reportError(new _GraphQLError.GraphQLError(\"Field \\\"\".concat(type.name, \".\").concat(fieldDef.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\"), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = (0, _definition.getNamedType)(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && (0, _definition.isInputObjectType)(parentType)) {\n        var suggestions = (0, _suggestionList.suggestionList)(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new _GraphQLError.GraphQLError(\"Field \\\"\".concat(node.name.value, \"\\\" is not defined by type \\\"\").concat(parentType.name, \"\\\".\") + (0, _didYouMean.didYouMean)(suggestions), node));\n      }\n    },\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if ((0, _definition.isNonNullType)(type)) {\n        context.reportError(new _GraphQLError.GraphQLError(\"Expected value of type \\\"\".concat((0, _inspect.inspect)(type), \"\\\", found \").concat((0, _printer.print)(node), \".\"), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      return isValidValueNode(context, node);\n    },\n    IntValue: function IntValue(node) {\n      return isValidValueNode(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidValueNode(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidValueNode(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidValueNode(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = (0, _definition.getNamedType)(locationType);\n\n  if (!(0, _definition.isLeafType)(type)) {\n    var typeStr = (0, _inspect.inspect)(locationType);\n    context.reportError(new _GraphQLError.GraphQLError(\"Expected value of type \\\"\".concat(typeStr, \"\\\", found \").concat((0, _printer.print)(node), \".\"), node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      var _typeStr = (0, _inspect.inspect)(locationType);\n\n      context.reportError(new _GraphQLError.GraphQLError(\"Expected value of type \\\"\".concat(_typeStr, \"\\\", found \").concat((0, _printer.print)(node), \".\"), node));\n    }\n  } catch (error) {\n    var _typeStr2 = (0, _inspect.inspect)(locationType);\n\n    if (error instanceof _GraphQLError.GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new _GraphQLError.GraphQLError(\"Expected value of type \\\"\".concat(_typeStr2, \"\\\", found \").concat((0, _printer.print)(node), \"; \") + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}"},"sourceMaps":null,"error":null,"hash":"f6d9581f3756912b0d301a91ff526b50","cacheData":{"env":{}}}