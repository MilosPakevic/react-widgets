{"id":"EIlD","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\package.json","includedInParent":true,"mtime":1640596613181},{"name":"../jsutils/inspect.mjs","loc":{"line":1,"column":24},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\scalars.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\inspect.mjs"},{"name":"../jsutils/isObjectLike.mjs","loc":{"line":2,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\scalars.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\isObjectLike.mjs"},{"name":"../language/kinds.mjs","loc":{"line":3,"column":21},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\scalars.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\kinds.mjs"},{"name":"../language/printer.mjs","loc":{"line":4,"column":22},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\scalars.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\printer.mjs"},{"name":"../error/GraphQLError.mjs","loc":{"line":5,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\scalars.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\error\\GraphQLError.mjs"},{"name":"./definition.mjs","loc":{"line":6,"column":34},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\scalars.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\definition.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLString = exports.GraphQLInt = exports.GraphQLID = exports.GraphQLFloat = exports.GraphQLBoolean = exports.GRAPHQL_MIN_INT = exports.GRAPHQL_MAX_INT = void 0;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\nexports.specifiedScalarTypes = void 0;\n\nvar _inspect = require(\"../jsutils/inspect.mjs\");\n\nvar _isObjectLike = require(\"../jsutils/isObjectLike.mjs\");\n\nvar _kinds = require(\"../language/kinds.mjs\");\n\nvar _printer = require(\"../language/printer.mjs\");\n\nvar _GraphQLError = require(\"../error/GraphQLError.mjs\");\n\nvar _definition = require(\"./definition.mjs\");\n\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\nvar GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;\nvar GRAPHQL_MIN_INT = -2147483648;\nexports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;\nvar GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    var num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new _GraphQLError.GraphQLError(\"Int cannot represent non-integer value: \".concat((0, _inspect.inspect)(coercedValue)));\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError('Int cannot represent non 32-bit signed integer value: ' + (0, _inspect.inspect)(coercedValue));\n    }\n\n    return num;\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\"Int cannot represent non-integer value: \".concat((0, _inspect.inspect)(inputValue)));\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(inputValue));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(\"Int cannot represent non-integer value: \".concat((0, _printer.print)(valueNode)), valueNode);\n    }\n\n    var num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\"Int cannot represent non 32-bit signed integer value: \".concat(valueNode.value), valueNode);\n    }\n\n    return num;\n  }\n});\nexports.GraphQLInt = GraphQLInt;\nvar GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    var num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new _GraphQLError.GraphQLError(\"Float cannot represent non numeric value: \".concat((0, _inspect.inspect)(coercedValue)));\n    }\n\n    return num;\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\"Float cannot represent non numeric value: \".concat((0, _inspect.inspect)(inputValue)));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.FLOAT && valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(\"Float cannot represent non numeric value: \".concat((0, _printer.print)(valueNode)), valueNode);\n    }\n\n    return parseFloat(valueNode.value);\n  }\n});\nexports.GraphQLFloat = GraphQLFloat;\nvar GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\"String cannot represent value: \".concat((0, _inspect.inspect)(outputValue)));\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new _GraphQLError.GraphQLError(\"String cannot represent a non string value: \".concat((0, _inspect.inspect)(inputValue)));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING) {\n      throw new _GraphQLError.GraphQLError(\"String cannot represent a non string value: \".concat((0, _printer.print)(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexports.GraphQLString = GraphQLString;\nvar GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new _GraphQLError.GraphQLError(\"Boolean cannot represent a non boolean value: \".concat((0, _inspect.inspect)(coercedValue)));\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new _GraphQLError.GraphQLError(\"Boolean cannot represent a non boolean value: \".concat((0, _inspect.inspect)(inputValue)));\n    }\n\n    return inputValue;\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {\n      throw new _GraphQLError.GraphQLError(\"Boolean cannot represent a non boolean value: \".concat((0, _printer.print)(valueNode)), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexports.GraphQLBoolean = GraphQLBoolean;\nvar GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: function serialize(outputValue) {\n    var coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new _GraphQLError.GraphQLError(\"ID cannot represent value: \".concat((0, _inspect.inspect)(outputValue)));\n  },\n  parseValue: function parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\"ID cannot represent value: \".concat((0, _inspect.inspect)(inputValue)));\n  },\n  parseLiteral: function parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING && valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError('ID cannot represent a non-string and non-integer value: ' + (0, _printer.print)(valueNode), valueNode);\n    }\n\n    return valueNode.value;\n  }\n});\nexports.GraphQLID = GraphQLID;\nvar specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexports.specifiedScalarTypes = specifiedScalarTypes;\n\nfunction isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(function (_ref) {\n    var name = _ref.name;\n    return type.name === name;\n  });\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\n\nfunction serializeObject(outputValue) {\n  if ((0, _isObjectLike.isObjectLike)(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      var valueOfResult = outputValue.valueOf();\n\n      if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}"},"sourceMaps":null,"error":null,"hash":"44f5847bff17196032249c08552abe75","cacheData":{"env":{}}}