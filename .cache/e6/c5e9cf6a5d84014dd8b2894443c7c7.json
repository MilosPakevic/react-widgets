{"id":"OZv9","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\package.json","includedInParent":true,"mtime":1640596613181},{"name":"../jsutils/devAssert.mjs","loc":{"line":1,"column":26},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\assertName.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\devAssert.mjs"},{"name":"../error/GraphQLError.mjs","loc":{"line":2,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\assertName.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\error\\GraphQLError.mjs"},{"name":"../language/characterClasses.mjs","loc":{"line":3,"column":44},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\assertName.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\characterClasses.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertEnumValueName = assertEnumValueName;\nexports.assertName = assertName;\n\nvar _devAssert = require(\"../jsutils/devAssert.mjs\");\n\nvar _GraphQLError = require(\"../error/GraphQLError.mjs\");\n\nvar _characterClasses = require(\"../language/characterClasses.mjs\");\n\n/**\n * Upholds the spec rules about naming.\n */\nfunction assertName(name) {\n  name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');\n  typeof name === 'string' || (0, _devAssert.devAssert)(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new _GraphQLError.GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (var i = 1; i < name.length; ++i) {\n    if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {\n      throw new _GraphQLError.GraphQLError(\"Names must only contain [_a-zA-Z0-9] but \\\"\".concat(name, \"\\\" does not.\"));\n    }\n  }\n\n  if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {\n    throw new _GraphQLError.GraphQLError(\"Names must start with [_a-zA-Z] but \\\"\".concat(name, \"\\\" does not.\"));\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\n\nfunction assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new _GraphQLError.GraphQLError(\"Enum values cannot be named: \".concat(name));\n  }\n\n  return assertName(name);\n}"},"sourceMaps":null,"error":null,"hash":"74bdf17a5ec3d47ab02507954ffcc8a8","cacheData":{"env":{}}}