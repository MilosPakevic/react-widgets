{"id":"gVje","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\package.json","includedInParent":true,"mtime":1640596613181},{"name":"../jsutils/inspect.mjs","loc":{"line":1,"column":24},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\inspect.mjs"},{"name":"../jsutils/devAssert.mjs","loc":{"line":2,"column":26},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\devAssert.mjs"},{"name":"../jsutils/isAsyncIterable.mjs","loc":{"line":3,"column":32},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\isAsyncIterable.mjs"},{"name":"../jsutils/Path.mjs","loc":{"line":4,"column":37},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\Path.mjs"},{"name":"../error/GraphQLError.mjs","loc":{"line":5,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\error\\GraphQLError.mjs"},{"name":"../error/locatedError.mjs","loc":{"line":6,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\error\\locatedError.mjs"},{"name":"./collectFields.mjs","loc":{"line":7,"column":30},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\collectFields.mjs"},{"name":"./values.mjs","loc":{"line":8,"column":34},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs"},{"name":"./execute.mjs","loc":{"line":15,"column":7},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\execute.mjs"},{"name":"./mapAsyncIterator.mjs","loc":{"line":16,"column":33},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\subscribe.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\mapAsyncIterator.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSourceEventStream = createSourceEventStream;\nexports.subscribe = subscribe;\n\nvar _inspect = require(\"../jsutils/inspect.mjs\");\n\nvar _devAssert = require(\"../jsutils/devAssert.mjs\");\n\nvar _isAsyncIterable = require(\"../jsutils/isAsyncIterable.mjs\");\n\nvar _Path = require(\"../jsutils/Path.mjs\");\n\nvar _GraphQLError = require(\"../error/GraphQLError.mjs\");\n\nvar _locatedError = require(\"../error/locatedError.mjs\");\n\nvar _collectFields = require(\"./collectFields.mjs\");\n\nvar _values = require(\"./values.mjs\");\n\nvar _execute = require(\"./execute.mjs\");\n\nvar _mapAsyncIterator = require(\"./mapAsyncIterator.mjs\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\nfunction subscribe(_x) {\n  return _subscribe.apply(this, arguments);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nfunction _subscribe() {\n  _subscribe = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(args) {\n    var schema,\n        document,\n        rootValue,\n        contextValue,\n        variableValues,\n        operationName,\n        fieldResolver,\n        subscribeFieldResolver,\n        resultOrStream,\n        mapSourceToResponse,\n        _args = arguments;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Temporary for v15 to v16 migration. Remove in v17\n            _args.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n            schema = args.schema, document = args.document, rootValue = args.rootValue, contextValue = args.contextValue, variableValues = args.variableValues, operationName = args.operationName, fieldResolver = args.fieldResolver, subscribeFieldResolver = args.subscribeFieldResolver;\n            _context.next = 4;\n            return createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n\n          case 4:\n            resultOrStream = _context.sent;\n\n            if ((0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", resultOrStream);\n\n          case 7:\n            // For each payload yielded from a subscription, map it over the normal\n            // GraphQL `execute` function, with `payload` as the rootValue.\n            // This implements the \"MapSourceToResponseEvent\" algorithm described in\n            // the GraphQL specification. The `execute` function provides the\n            // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n            // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n            mapSourceToResponse = function mapSourceToResponse(payload) {\n              return (0, _execute.execute)({\n                schema: schema,\n                document: document,\n                rootValue: payload,\n                contextValue: contextValue,\n                variableValues: variableValues,\n                operationName: operationName,\n                fieldResolver: fieldResolver\n              });\n            }; // Map every source value to a ExecutionResult value as described above.\n\n\n            return _context.abrupt(\"return\", (0, _mapAsyncIterator.mapAsyncIterator)(resultOrStream, mapSourceToResponse));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _subscribe.apply(this, arguments);\n}\n\nfunction createSourceEventStream(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction _createSourceEventStream() {\n  _createSourceEventStream = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {\n    var exeContext, eventStream;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // If arguments are missing or incorrectly typed, this is an internal\n            // developer mistake which should throw an early error.\n            (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n            // a \"Response\" with only errors is returned.\n\n            exeContext = (0, _execute.buildExecutionContext)({\n              schema: schema,\n              document: document,\n              rootValue: rootValue,\n              contextValue: contextValue,\n              variableValues: variableValues,\n              operationName: operationName,\n              subscribeFieldResolver: subscribeFieldResolver\n            }); // Return early errors if execution context failed.\n\n            if ('schema' in exeContext) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              errors: exeContext\n            });\n\n          case 4:\n            _context2.prev = 4;\n            _context2.next = 7;\n            return executeSubscription(exeContext);\n\n          case 7:\n            eventStream = _context2.sent;\n\n            if ((0, _isAsyncIterable.isAsyncIterable)(eventStream)) {\n              _context2.next = 10;\n              break;\n            }\n\n            throw new Error('Subscription field must return Async Iterable. ' + \"Received: \".concat((0, _inspect.inspect)(eventStream), \".\"));\n\n          case 10:\n            return _context2.abrupt(\"return\", eventStream);\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](4);\n\n            if (!(_context2.t0 instanceof _GraphQLError.GraphQLError)) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", {\n              errors: [_context2.t0]\n            });\n\n          case 17:\n            throw _context2.t0;\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 13]]);\n  }));\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction executeSubscription(_x9) {\n  return _executeSubscription.apply(this, arguments);\n}\n\nfunction _executeSubscription() {\n  _executeSubscription = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(exeContext) {\n    var schema, fragments, operation, variableValues, rootValue, rootType, rootFields, _, responseName, fieldNodes, fieldDef, fieldName, path, info, _fieldDef$subscribe, args, _contextValue, resolveFn, eventStream;\n\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            schema = exeContext.schema, fragments = exeContext.fragments, operation = exeContext.operation, variableValues = exeContext.variableValues, rootValue = exeContext.rootValue;\n            rootType = schema.getSubscriptionType();\n\n            if (!(rootType == null)) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new _GraphQLError.GraphQLError('Schema is not configured to execute subscription operation.', operation);\n\n          case 4:\n            rootFields = (0, _collectFields.collectFields)(schema, fragments, variableValues, rootType, operation.selectionSet);\n            _ = _slicedToArray(_toConsumableArray(rootFields.entries())[0], 2), responseName = _[0], fieldNodes = _[1];\n            fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);\n\n            if (fieldDef) {\n              _context3.next = 10;\n              break;\n            }\n\n            fieldName = fieldNodes[0].name.value;\n            throw new _GraphQLError.GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n\n          case 10:\n            path = (0, _Path.addPath)(undefined, responseName, rootType.name);\n            info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, rootType, path);\n            _context3.prev = 12;\n            // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n            // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n            // Build a JS object of arguments from the field.arguments AST, using the\n            // variables scope to fulfill any variable references.\n            args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n            // is provided to every resolve function within an execution. It is commonly\n            // used to represent an authenticated user, or request-specific caches.\n\n            _contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n            // AsyncIterable yielding raw payloads.\n\n            resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n            _context3.next = 18;\n            return resolveFn(rootValue, args, _contextValue, info);\n\n          case 18:\n            eventStream = _context3.sent;\n\n            if (!(eventStream instanceof Error)) {\n              _context3.next = 21;\n              break;\n            }\n\n            throw eventStream;\n\n          case 21:\n            return _context3.abrupt(\"return\", eventStream);\n\n          case 24:\n            _context3.prev = 24;\n            _context3.t0 = _context3[\"catch\"](12);\n            throw (0, _locatedError.locatedError)(_context3.t0, fieldNodes, (0, _Path.pathToArray)(path));\n\n          case 27:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[12, 24]]);\n  }));\n  return _executeSubscription.apply(this, arguments);\n}"},"sourceMaps":null,"error":null,"hash":"dba2d72a6dfdc287167b80df3b4ad8d3","cacheData":{"env":{}}}