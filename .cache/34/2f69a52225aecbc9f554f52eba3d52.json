{"id":"NiGb","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\package.json","includedInParent":true,"mtime":1640596614123},{"name":"tslib","loc":{"line":1,"column":36},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\tslib\\tslib.es6.js"},{"name":"../../utilities/globals/index.js","loc":{"line":2,"column":26},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\globals\\index.js"},{"name":"./fixPolyfills.js","loc":{"line":3,"column":7},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\fixPolyfills.js"},{"name":"optimism","loc":{"line":4,"column":21},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\optimism\\lib\\bundle.esm.js"},{"name":"@wry/equality","loc":{"line":5,"column":22},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@wry\\equality\\lib\\equality.esm.js"},{"name":"../core/cache.js","loc":{"line":6,"column":28},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\core\\cache.js"},{"name":"../core/types/common.js","loc":{"line":7,"column":34},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\core\\types\\common.js"},{"name":"../../utilities/index.js","loc":{"line":8,"column":52},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\index.js"},{"name":"./readFromStore.js","loc":{"line":9,"column":28},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\readFromStore.js"},{"name":"./writeToStore.js","loc":{"line":10,"column":28},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\writeToStore.js"},{"name":"./entityStore.js","loc":{"line":11,"column":51},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\entityStore.js"},{"name":"./reactiveVars.js","loc":{"line":12,"column":50},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\reactiveVars.js"},{"name":"./policies.js","loc":{"line":13,"column":25},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\policies.js"},{"name":"./helpers.js","loc":{"line":14,"column":63},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\helpers.js"},{"name":"./object-canon.js","loc":{"line":15,"column":35},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\inMemoryCache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\inmemory\\object-canon.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InMemoryCache = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _index = require(\"../../utilities/globals/index.js\");\n\nrequire(\"./fixPolyfills.js\");\n\nvar _optimism = require(\"optimism\");\n\nvar _equality = require(\"@wry/equality\");\n\nvar _cache = require(\"../core/cache.js\");\n\nvar _common = require(\"../core/types/common.js\");\n\nvar _index2 = require(\"../../utilities/index.js\");\n\nvar _readFromStore = require(\"./readFromStore.js\");\n\nvar _writeToStore = require(\"./writeToStore.js\");\n\nvar _entityStore = require(\"./entityStore.js\");\n\nvar _reactiveVars = require(\"./reactiveVars.js\");\n\nvar _policies = require(\"./policies.js\");\n\nvar _helpers = require(\"./helpers.js\");\n\nvar _objectCanon = require(\"./object-canon.js\");\n\nvar InMemoryCache = function (_super) {\n  (0, _tslib.__extends)(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.makeVar = _reactiveVars.makeVar;\n    _this.txCount = 0;\n    _this.config = (0, _helpers.normalizeConfig)(config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new _policies.Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n\n    _this.init();\n\n    return _this;\n  }\n\n  InMemoryCache.prototype.init = function () {\n    var rootStore = this.data = new _entityStore.EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching\n    });\n    this.optimisticData = rootStore.stump;\n    this.resetResultCache();\n  };\n\n  InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n    var _this = this;\n\n    var previousReader = this.storeReader;\n    this.storeWriter = new _writeToStore.StoreWriter(this, this.storeReader = new _readFromStore.StoreReader({\n      cache: this,\n      addTypename: this.addTypename,\n      resultCacheMaxSize: this.config.resultCacheMaxSize,\n      canonizeResults: (0, _helpers.shouldCanonizeResults)(this.config),\n      canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon\n    }));\n    this.maybeBroadcastWatch = (0, _optimism.wrap)(function (c, options) {\n      return _this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (c) {\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n\n        if ((0, _entityStore.supportsResultCaching)(store)) {\n          var optimistic = c.optimistic,\n              rootId = c.rootId,\n              variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, (0, _objectCanon.canonicalStringify)({\n            optimistic: optimistic,\n            rootId: rootId,\n            variables: variables\n          }));\n        }\n      }\n    });\n    new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n      return group.resetCaching();\n    });\n  };\n\n  InMemoryCache.prototype.restore = function (data) {\n    this.init();\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return (optimistic ? this.optimisticData : this.data).extract();\n  };\n\n  InMemoryCache.prototype.read = function (options) {\n    var _a = options.returnPartialData,\n        returnPartialData = _a === void 0 ? false : _a;\n\n    try {\n      return this.storeReader.diffQueryAgainstStore((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData: returnPartialData\n      })).result || null;\n    } catch (e) {\n      if (e instanceof _common.MissingFieldError) {\n        return null;\n      }\n\n      throw e;\n    }\n  };\n\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.modify = function (options) {\n    if (_helpers.hasOwn.call(options, \"id\") && !options.id) {\n      return false;\n    }\n\n    var store = options.optimistic ? this.optimisticData : this.data;\n\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config\n    }));\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    if (!this.watches.size) {\n      (0, _reactiveVars.recallCache)(this);\n    }\n\n    this.watches.add(watch);\n\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n\n    return function () {\n      if (_this.watches.delete(watch) && !_this.watches.size) {\n        (0, _reactiveVars.forgetCache)(_this);\n      }\n\n      _this.maybeBroadcastWatch.forget(watch);\n    };\n  };\n\n  InMemoryCache.prototype.gc = function (options) {\n    _objectCanon.canonicalStringify.reset();\n\n    var ids = this.optimisticData.gc();\n\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n\n    return ids;\n  };\n\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n\n  InMemoryCache.prototype.identify = function (object) {\n    if ((0, _index2.isReference)(object)) return object.__ref;\n\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      __DEV__ && _index.invariant.warn(e);\n    }\n  };\n\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (_helpers.hasOwn.call(options, \"id\")) {\n        return false;\n      }\n\n      options = (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n\n    try {\n      ++this.txCount;\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.reset = function (options) {\n    var _this = this;\n\n    this.init();\n\n    _objectCanon.canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      this.watches.forEach(function (watch) {\n        return _this.maybeBroadcastWatch.forget(watch);\n      });\n      this.watches.clear();\n      (0, _reactiveVars.forgetCache)(this);\n    } else {\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n\n  InMemoryCache.prototype.batch = function (options) {\n    var _this = this;\n\n    var update = options.update,\n        _a = options.optimistic,\n        optimistic = _a === void 0 ? true : _a,\n        removeOptimistic = options.removeOptimistic,\n        onWatchUpdated = options.onWatchUpdated;\n    var updateResult;\n\n    var perform = function (layer) {\n      var _a = _this,\n          data = _a.data,\n          optimisticData = _a.optimisticData;\n      ++_this.txCount;\n\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n\n      try {\n        return updateResult = update(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n\n    var alreadyDirty = new Set();\n\n    if (onWatchUpdated && !this.txCount) {\n      this.broadcastWatches((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n        onWatchUpdated: function (watch) {\n          alreadyDirty.add(watch);\n          return false;\n        }\n      }));\n    }\n\n    if (typeof optimistic === 'string') {\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      perform(this.data);\n    } else {\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n        onWatchUpdated: function (watch, diff) {\n          var result = onWatchUpdated.call(this, watch, diff);\n\n          if (result !== false) {\n            alreadyDirty.delete(watch);\n          }\n\n          return result;\n        }\n      }));\n\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(function (watch) {\n          return _this.maybeBroadcastWatch.dirty(watch);\n        });\n      }\n    } else {\n      this.broadcastWatches(options);\n    }\n\n    return updateResult;\n  };\n\n  InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n    return this.batch({\n      update: update,\n      optimistic: optimisticId || optimisticId !== null\n    });\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n\n      if (!result) {\n        result = (0, _index2.addTypenameToDocument)(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n\n      return result;\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function (options) {\n    var _this = this;\n\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c, options);\n      });\n    }\n  };\n\n  InMemoryCache.prototype.broadcastWatch = function (c, options) {\n    var lastDiff = c.lastDiff;\n    var diff = this.diff(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        return;\n      }\n    }\n\n    if (!lastDiff || !(0, _equality.equal)(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  };\n\n  return InMemoryCache;\n}(_cache.ApolloCache);\n\nexports.InMemoryCache = InMemoryCache;"},"sourceMaps":null,"error":null,"hash":"1292c586bacfbfad99feb02761a96e4b","cacheData":{"env":{}}}