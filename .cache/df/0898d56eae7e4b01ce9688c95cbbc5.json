{"id":"oLsI","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\package.json","includedInParent":true,"mtime":1640596613181},{"name":"../language/kinds.mjs","loc":{"line":1,"column":21},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\ValidationContext.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\kinds.mjs"},{"name":"../language/visitor.mjs","loc":{"line":2,"column":22},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\ValidationContext.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\visitor.mjs"},{"name":"../utilities/TypeInfo.mjs","loc":{"line":3,"column":44},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\validation\\ValidationContext.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\TypeInfo.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationContext = exports.SDLValidationContext = exports.ASTValidationContext = void 0;\n\nvar _kinds = require(\"../language/kinds.mjs\");\n\nvar _visitor = require(\"../language/visitor.mjs\");\n\nvar _TypeInfo = require(\"../utilities/TypeInfo.mjs\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } Object.defineProperty(subClass, \"prototype\", { value: Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }), writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nvar ASTValidationContext = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function ASTValidationContext(ast, onError) {\n    _classCallCheck(this, ASTValidationContext);\n\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  _createClass(ASTValidationContext, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'ASTValidationContext';\n    }\n  }, {\n    key: \"reportError\",\n    value: function reportError(error) {\n      this._onError(error);\n    }\n  }, {\n    key: \"getDocument\",\n    value: function getDocument() {\n      return this._ast;\n    }\n  }, {\n    key: \"getFragment\",\n    value: function getFragment(name) {\n      var fragments;\n\n      if (this._fragments) {\n        fragments = this._fragments;\n      } else {\n        fragments = Object.create(null);\n\n        var _iterator = _createForOfIteratorHelper(this.getDocument().definitions),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var defNode = _step.value;\n\n            if (defNode.kind === _kinds.Kind.FRAGMENT_DEFINITION) {\n              fragments[defNode.name.value] = defNode;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        this._fragments = fragments;\n      }\n\n      return fragments[name];\n    }\n  }, {\n    key: \"getFragmentSpreads\",\n    value: function getFragmentSpreads(node) {\n      var spreads = this._fragmentSpreads.get(node);\n\n      if (!spreads) {\n        spreads = [];\n        var setsToVisit = [node];\n        var set;\n\n        while (set = setsToVisit.pop()) {\n          var _iterator2 = _createForOfIteratorHelper(set.selections),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var selection = _step2.value;\n\n              if (selection.kind === _kinds.Kind.FRAGMENT_SPREAD) {\n                spreads.push(selection);\n              } else if (selection.selectionSet) {\n                setsToVisit.push(selection.selectionSet);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        this._fragmentSpreads.set(node, spreads);\n      }\n\n      return spreads;\n    }\n  }, {\n    key: \"getRecursivelyReferencedFragments\",\n    value: function getRecursivelyReferencedFragments(operation) {\n      var fragments = this._recursivelyReferencedFragments.get(operation);\n\n      if (!fragments) {\n        fragments = [];\n        var collectedNames = Object.create(null);\n        var nodesToVisit = [operation.selectionSet];\n        var node;\n\n        while (node = nodesToVisit.pop()) {\n          var _iterator3 = _createForOfIteratorHelper(this.getFragmentSpreads(node)),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var spread = _step3.value;\n              var fragName = spread.name.value;\n\n              if (collectedNames[fragName] !== true) {\n                collectedNames[fragName] = true;\n                var fragment = this.getFragment(fragName);\n\n                if (fragment) {\n                  fragments.push(fragment);\n                  nodesToVisit.push(fragment.selectionSet);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n\n        this._recursivelyReferencedFragments.set(operation, fragments);\n      }\n\n      return fragments;\n    }\n  }]);\n\n  return ASTValidationContext;\n}(Symbol.toStringTag);\n\nexports.ASTValidationContext = ASTValidationContext;\n\nvar SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext, _Symbol$toStringTag2) {\n  _inherits(SDLValidationContext, _ASTValidationContext);\n\n  var _super = _createSuper(SDLValidationContext);\n\n  function SDLValidationContext(ast, schema, onError) {\n    var _this;\n\n    _classCallCheck(this, SDLValidationContext);\n\n    _this = _super.call(this, ast, onError);\n    _this._schema = schema;\n    return _this;\n  }\n\n  _createClass(SDLValidationContext, [{\n    key: _Symbol$toStringTag2,\n    get: function get() {\n      return 'SDLValidationContext';\n    }\n  }, {\n    key: \"getSchema\",\n    value: function getSchema() {\n      return this._schema;\n    }\n  }]);\n\n  return SDLValidationContext;\n}(ASTValidationContext, Symbol.toStringTag);\n\nexports.SDLValidationContext = SDLValidationContext;\n\nvar ValidationContext = /*#__PURE__*/function (_ASTValidationContext2, _Symbol$toStringTag3) {\n  _inherits(ValidationContext, _ASTValidationContext2);\n\n  var _super2 = _createSuper(ValidationContext);\n\n  function ValidationContext(schema, ast, typeInfo, onError) {\n    var _this2;\n\n    _classCallCheck(this, ValidationContext);\n\n    _this2 = _super2.call(this, ast, onError);\n    _this2._schema = schema;\n    _this2._typeInfo = typeInfo;\n    _this2._variableUsages = new Map();\n    _this2._recursiveVariableUsages = new Map();\n    return _this2;\n  }\n\n  _createClass(ValidationContext, [{\n    key: _Symbol$toStringTag3,\n    get: function get() {\n      return 'ValidationContext';\n    }\n  }, {\n    key: \"getSchema\",\n    value: function getSchema() {\n      return this._schema;\n    }\n  }, {\n    key: \"getVariableUsages\",\n    value: function getVariableUsages(node) {\n      var usages = this._variableUsages.get(node);\n\n      if (!usages) {\n        var newUsages = [];\n        var typeInfo = new _TypeInfo.TypeInfo(this._schema);\n        (0, _visitor.visit)(node, (0, _TypeInfo.visitWithTypeInfo)(typeInfo, {\n          VariableDefinition: function VariableDefinition() {\n            return false;\n          },\n          Variable: function Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue()\n            });\n          }\n        }));\n        usages = newUsages;\n\n        this._variableUsages.set(node, usages);\n      }\n\n      return usages;\n    }\n  }, {\n    key: \"getRecursiveVariableUsages\",\n    value: function getRecursiveVariableUsages(operation) {\n      var usages = this._recursiveVariableUsages.get(operation);\n\n      if (!usages) {\n        usages = this.getVariableUsages(operation);\n\n        var _iterator4 = _createForOfIteratorHelper(this.getRecursivelyReferencedFragments(operation)),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var frag = _step4.value;\n            usages = usages.concat(this.getVariableUsages(frag));\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        this._recursiveVariableUsages.set(operation, usages);\n      }\n\n      return usages;\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return this._typeInfo.getType();\n    }\n  }, {\n    key: \"getParentType\",\n    value: function getParentType() {\n      return this._typeInfo.getParentType();\n    }\n  }, {\n    key: \"getInputType\",\n    value: function getInputType() {\n      return this._typeInfo.getInputType();\n    }\n  }, {\n    key: \"getParentInputType\",\n    value: function getParentInputType() {\n      return this._typeInfo.getParentInputType();\n    }\n  }, {\n    key: \"getFieldDef\",\n    value: function getFieldDef() {\n      return this._typeInfo.getFieldDef();\n    }\n  }, {\n    key: \"getDirective\",\n    value: function getDirective() {\n      return this._typeInfo.getDirective();\n    }\n  }, {\n    key: \"getArgument\",\n    value: function getArgument() {\n      return this._typeInfo.getArgument();\n    }\n  }, {\n    key: \"getEnumValue\",\n    value: function getEnumValue() {\n      return this._typeInfo.getEnumValue();\n    }\n  }]);\n\n  return ValidationContext;\n}(ASTValidationContext, Symbol.toStringTag);\n\nexports.ValidationContext = ValidationContext;"},"sourceMaps":null,"error":null,"hash":"d605902ac49519b857a021e742c4611d","cacheData":{"env":{}}}