{"id":"PbSv","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\package.json","includedInParent":true,"mtime":1640596613181},{"name":"../jsutils/keyMap.mjs","loc":{"line":1,"column":23},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\keyMap.mjs"},{"name":"../jsutils/inspect.mjs","loc":{"line":2,"column":24},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\inspect.mjs"},{"name":"../jsutils/printPathArray.mjs","loc":{"line":3,"column":31},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\printPathArray.mjs"},{"name":"../error/GraphQLError.mjs","loc":{"line":4,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\error\\GraphQLError.mjs"},{"name":"../language/kinds.mjs","loc":{"line":5,"column":21},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\kinds.mjs"},{"name":"../language/printer.mjs","loc":{"line":6,"column":22},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\language\\printer.mjs"},{"name":"../type/definition.mjs","loc":{"line":7,"column":43},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\definition.mjs"},{"name":"../utilities/typeFromAST.mjs","loc":{"line":8,"column":28},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\typeFromAST.mjs"},{"name":"../utilities/valueFromAST.mjs","loc":{"line":9,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\valueFromAST.mjs"},{"name":"../utilities/coerceInputValue.mjs","loc":{"line":10,"column":33},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\execution\\values.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getArgumentValues = getArgumentValues;\nexports.getDirectiveValues = getDirectiveValues;\nexports.getVariableValues = getVariableValues;\n\nvar _keyMap = require(\"../jsutils/keyMap.mjs\");\n\nvar _inspect = require(\"../jsutils/inspect.mjs\");\n\nvar _printPathArray = require(\"../jsutils/printPathArray.mjs\");\n\nvar _GraphQLError = require(\"../error/GraphQLError.mjs\");\n\nvar _kinds = require(\"../language/kinds.mjs\");\n\nvar _printer = require(\"../language/printer.mjs\");\n\nvar _definition = require(\"../type/definition.mjs\");\n\nvar _typeFromAST = require(\"../utilities/typeFromAST.mjs\");\n\nvar _valueFromAST = require(\"../utilities/valueFromAST.mjs\");\n\nvar _coerceInputValue = require(\"../utilities/coerceInputValue.mjs\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\nfunction getVariableValues(schema, varDefNodes, inputs, options) {\n  var errors = [];\n  var maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    var coerced = coerceVariableValues(schema, varDefNodes, inputs, function (error) {\n      if (maxErrors != null && errors.length >= maxErrors) {\n        throw new _GraphQLError.GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n      }\n\n      errors.push(error);\n    });\n\n    if (errors.length === 0) {\n      return {\n        coerced: coerced\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors: errors\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  var coercedValues = {};\n\n  var _iterator = _createForOfIteratorHelper(varDefNodes),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var varDefNode = _step.value;\n      var varName = varDefNode.variable.name.value;\n      var varType = (0, _typeFromAST.typeFromAST)(schema, varDefNode.type);\n\n      if (!(0, _definition.isInputType)(varType)) {\n        // Must use input types for variables. This should be caught during\n        // validation, however is checked again here for safety.\n        var varTypeStr = (0, _printer.print)(varDefNode.type);\n        onError(new _GraphQLError.GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" expected value of type \\\"\").concat(varTypeStr, \"\\\" which cannot be used as an input type.\"), varDefNode.type));\n        return \"continue\";\n      }\n\n      if (!hasOwnProperty(inputs, varName)) {\n        if (varDefNode.defaultValue) {\n          coercedValues[varName] = (0, _valueFromAST.valueFromAST)(varDefNode.defaultValue, varType);\n        } else if ((0, _definition.isNonNullType)(varType)) {\n          var _varTypeStr = (0, _inspect.inspect)(varType);\n\n          onError(new _GraphQLError.GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of required type \\\"\").concat(_varTypeStr, \"\\\" was not provided.\"), varDefNode));\n        }\n\n        return \"continue\";\n      }\n\n      var value = inputs[varName];\n\n      if (value === null && (0, _definition.isNonNullType)(varType)) {\n        var _varTypeStr2 = (0, _inspect.inspect)(varType);\n\n        onError(new _GraphQLError.GraphQLError(\"Variable \\\"$\".concat(varName, \"\\\" of non-null type \\\"\").concat(_varTypeStr2, \"\\\" must not be null.\"), varDefNode));\n        return \"continue\";\n      }\n\n      coercedValues[varName] = (0, _coerceInputValue.coerceInputValue)(value, varType, function (path, invalidValue, error) {\n        var prefix = \"Variable \\\"$\".concat(varName, \"\\\" got invalid value \") + (0, _inspect.inspect)(invalidValue);\n\n        if (path.length > 0) {\n          prefix += \" at \\\"\".concat(varName).concat((0, _printPathArray.printPathArray)(path), \"\\\"\");\n        }\n\n        onError(new _GraphQLError.GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));\n      });\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\n\nfunction getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  var coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  var argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];\n  var argNodeMap = (0, _keyMap.keyMap)(argumentNodes, function (arg) {\n    return arg.name.value;\n  });\n\n  var _iterator2 = _createForOfIteratorHelper(def.args),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var argDef = _step2.value;\n      var name = argDef.name;\n      var argType = argDef.type;\n      var argumentNode = argNodeMap[name];\n\n      if (!argumentNode) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if ((0, _definition.isNonNullType)(argType)) {\n          throw new _GraphQLError.GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat((0, _inspect.inspect)(argType), \"\\\" \") + 'was not provided.', node);\n        }\n\n        continue;\n      }\n\n      var valueNode = argumentNode.value;\n      var isNull = valueNode.kind === _kinds.Kind.NULL;\n\n      if (valueNode.kind === _kinds.Kind.VARIABLE) {\n        var variableName = valueNode.name.value;\n\n        if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n          if (argDef.defaultValue !== undefined) {\n            coercedValues[name] = argDef.defaultValue;\n          } else if ((0, _definition.isNonNullType)(argType)) {\n            throw new _GraphQLError.GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of required type \\\"\").concat((0, _inspect.inspect)(argType), \"\\\" \") + \"was provided the variable \\\"$\".concat(variableName, \"\\\" which was not provided a runtime value.\"), valueNode);\n          }\n\n          continue;\n        }\n\n        isNull = variableValues[variableName] == null;\n      }\n\n      if (isNull && (0, _definition.isNonNullType)(argType)) {\n        throw new _GraphQLError.GraphQLError(\"Argument \\\"\".concat(name, \"\\\" of non-null type \\\"\").concat((0, _inspect.inspect)(argType), \"\\\" \") + 'must not be null.', valueNode);\n      }\n\n      var coercedValue = (0, _valueFromAST.valueFromAST)(valueNode, argType, variableValues);\n\n      if (coercedValue === undefined) {\n        // Note: ValuesOfCorrectTypeRule validation should catch this before\n        // execution. This is a runtime check to ensure execution does not\n        // continue with an invalid argument value.\n        throw new _GraphQLError.GraphQLError(\"Argument \\\"\".concat(name, \"\\\" has invalid value \").concat((0, _printer.print)(valueNode), \".\"), valueNode);\n      }\n\n      coercedValues[name] = coercedValue;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\n\nfunction getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  var directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find(function (directive) {\n    return directive.name.value === directiveDef.name;\n  });\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}"},"sourceMaps":null,"error":null,"hash":"e7b27e635038d441c38a33caecc411e5","cacheData":{"env":{}}}