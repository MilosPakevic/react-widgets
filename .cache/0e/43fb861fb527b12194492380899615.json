{"id":"ELQ8","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\package.json","includedInParent":true,"mtime":1640596614404},{"name":"tslib","loc":{"line":1,"column":26},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\observables\\Concast.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\tslib\\tslib.es6.js"},{"name":"./Observable.js","loc":{"line":2,"column":27},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\observables\\Concast.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\observables\\Observable.js"},{"name":"./iteration.js","loc":{"line":3,"column":39},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\observables\\Concast.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\observables\\iteration.js"},{"name":"./subclassing.js","loc":{"line":4,"column":38},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\observables\\Concast.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\observables\\subclassing.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Concast = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _Observable = require(\"./Observable.js\");\n\nvar _iteration = require(\"./iteration.js\");\n\nvar _subclassing = require(\"./subclassing.js\");\n\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\n\nvar Concast = function (_super) {\n  (0, _tslib.__extends)(Concast, _super);\n\n  function Concast(sources) {\n    var _this = _super.call(this, function (observer) {\n      _this.addObserver(observer);\n\n      return function () {\n        return _this.removeObserver(observer);\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.addCount = 0;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    _this.handlers = {\n      next: function (result) {\n        if (_this.sub !== null) {\n          _this.latest = [\"next\", result];\n          (0, _iteration.iterateObserversSafely)(_this.observers, \"next\", result);\n        }\n      },\n      error: function (error) {\n        var sub = _this.sub;\n\n        if (sub !== null) {\n          if (sub) setTimeout(function () {\n            return sub.unsubscribe();\n          });\n          _this.sub = null;\n          _this.latest = [\"error\", error];\n\n          _this.reject(error);\n\n          (0, _iteration.iterateObserversSafely)(_this.observers, \"error\", error);\n        }\n      },\n      complete: function () {\n        if (_this.sub !== null) {\n          var value = _this.sources.shift();\n\n          if (!value) {\n            _this.sub = null;\n\n            if (_this.latest && _this.latest[0] === \"next\") {\n              _this.resolve(_this.latest[1]);\n            } else {\n              _this.resolve();\n            }\n\n            (0, _iteration.iterateObserversSafely)(_this.observers, \"complete\");\n          } else if (isPromiseLike(value)) {\n            value.then(function (obs) {\n              return _this.sub = obs.subscribe(_this.handlers);\n            });\n          } else {\n            _this.sub = value.subscribe(_this.handlers);\n          }\n        }\n      }\n    };\n\n    _this.cancel = function (reason) {\n      _this.reject(reason);\n\n      _this.sources = [];\n\n      _this.handlers.complete();\n    };\n\n    _this.promise.catch(function (_) {});\n\n    if (typeof sources === \"function\") {\n      sources = [new _Observable.Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(function (iterable) {\n        return _this.start(iterable);\n      }, _this.handlers.error);\n    } else {\n      _this.start(sources);\n    }\n\n    return _this;\n  }\n\n  Concast.prototype.start = function (sources) {\n    if (this.sub !== void 0) return;\n    this.sources = Array.from(sources);\n    this.handlers.complete();\n  };\n\n  Concast.prototype.deliverLastMessage = function (observer) {\n    if (this.latest) {\n      var nextOrError = this.latest[0];\n      var method = observer[nextOrError];\n\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n\n  Concast.prototype.addObserver = function (observer) {\n    if (!this.observers.has(observer)) {\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  };\n\n  Concast.prototype.removeObserver = function (observer, quietly) {\n    if (this.observers.delete(observer) && --this.addCount < 1 && !quietly) {\n      this.handlers.error(new Error(\"Observable cancelled prematurely\"));\n    }\n  };\n\n  Concast.prototype.cleanup = function (callback) {\n    var _this = this;\n\n    var called = false;\n\n    var once = function () {\n      if (!called) {\n        called = true;\n\n        _this.observers.delete(observer);\n\n        callback();\n      }\n    };\n\n    var observer = {\n      next: once,\n      error: once,\n      complete: once\n    };\n    var count = this.addCount;\n    this.addObserver(observer);\n    this.addCount = count;\n  };\n\n  return Concast;\n}(_Observable.Observable);\n\nexports.Concast = Concast;\n(0, _subclassing.fixObservableSubclass)(Concast);"},"sourceMaps":null,"error":null,"hash":"ff6c8d07f81597db45307504c9317aa2","cacheData":{"env":{}}}