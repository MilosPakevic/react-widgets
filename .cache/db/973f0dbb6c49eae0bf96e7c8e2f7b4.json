{"id":"cMNk","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\package.json","includedInParent":true,"mtime":1640596613181},{"name":"../jsutils/inspect.mjs","loc":{"line":1,"column":24},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\inspect.mjs"},{"name":"../jsutils/invariant.mjs","loc":{"line":2,"column":26},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\invariant.mjs"},{"name":"../jsutils/didYouMean.mjs","loc":{"line":3,"column":27},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\didYouMean.mjs"},{"name":"../jsutils/isObjectLike.mjs","loc":{"line":4,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\isObjectLike.mjs"},{"name":"../jsutils/suggestionList.mjs","loc":{"line":5,"column":31},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\suggestionList.mjs"},{"name":"../jsutils/printPathArray.mjs","loc":{"line":6,"column":31},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\printPathArray.mjs"},{"name":"../jsutils/Path.mjs","loc":{"line":7,"column":37},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\Path.mjs"},{"name":"../jsutils/isIterableObject.mjs","loc":{"line":8,"column":33},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\jsutils\\isIterableObject.mjs"},{"name":"../error/GraphQLError.mjs","loc":{"line":9,"column":29},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\error\\GraphQLError.mjs"},{"name":"../type/definition.mjs","loc":{"line":15,"column":7},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\utilities\\coerceInputValue.mjs","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\graphql\\type\\definition.mjs"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.coerceInputValue = coerceInputValue;\n\nvar _inspect = require(\"../jsutils/inspect.mjs\");\n\nvar _invariant = require(\"../jsutils/invariant.mjs\");\n\nvar _didYouMean = require(\"../jsutils/didYouMean.mjs\");\n\nvar _isObjectLike = require(\"../jsutils/isObjectLike.mjs\");\n\nvar _suggestionList = require(\"../jsutils/suggestionList.mjs\");\n\nvar _printPathArray = require(\"../jsutils/printPathArray.mjs\");\n\nvar _Path = require(\"../jsutils/Path.mjs\");\n\nvar _isIterableObject = require(\"../jsutils/isIterableObject.mjs\");\n\nvar _GraphQLError = require(\"../error/GraphQLError.mjs\");\n\nvar _definition = require(\"../type/definition.mjs\");\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nfunction coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + (0, _inspect.inspect)(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat((0, _printPathArray.printPathArray)(path), \"\\\"\");\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if ((0, _definition.isNonNullType)(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(\"Expected non-nullable type \\\"\".concat((0, _inspect.inspect)(type), \"\\\" not to be null.\")));\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if ((0, _definition.isListType)(type)) {\n    var itemType = type.ofType;\n\n    if ((0, _isIterableObject.isIterableObject)(inputValue)) {\n      return Array.from(inputValue, function (itemValue, index) {\n        var itemPath = (0, _Path.addPath)(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if ((0, _definition.isInputObjectType)(type)) {\n    if (!(0, _isObjectLike.isObjectLike)(inputValue)) {\n      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\" to be an object.\")));\n      return;\n    }\n\n    var coercedValue = {};\n    var fieldDefs = type.getFields();\n\n    for (var _i = 0, _Object$values = Object.values(fieldDefs); _i < _Object$values.length; _i++) {\n      var field = _Object$values[_i];\n      var fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if ((0, _definition.isNonNullType)(field.type)) {\n          var typeStr = (0, _inspect.inspect)(field.type);\n          onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(\"Field \\\"\".concat(field.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\")));\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n\n    for (var _i2 = 0, _Object$keys = Object.keys(inputValue); _i2 < _Object$keys.length; _i2++) {\n      var fieldName = _Object$keys[_i2];\n\n      if (!fieldDefs[fieldName]) {\n        var suggestions = (0, _suggestionList.suggestionList)(fieldName, Object.keys(type.getFields()));\n        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \\\"\").concat(type.name, \"\\\".\") + (0, _didYouMean.didYouMean)(suggestions)));\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if ((0, _definition.isLeafType)(type)) {\n    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof _GraphQLError.GraphQLError) {\n        onError((0, _Path.pathToArray)(path), inputValue, error);\n      } else {\n        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\". \") + error.message, undefined, undefined, undefined, undefined, error));\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\".\")));\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n\n  false || (0, _invariant.invariant)(false, 'Unexpected input type: ' + (0, _inspect.inspect)(type));\n}"},"sourceMaps":null,"error":null,"hash":"5b661e27f8594437e893c74b228289e0","cacheData":{"env":{}}}