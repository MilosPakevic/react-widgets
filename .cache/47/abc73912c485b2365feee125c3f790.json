{"id":"LIEm","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\package.json","includedInParent":true,"mtime":1640596614123},{"name":"tslib","loc":{"line":1,"column":33},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\core\\cache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\tslib\\tslib.es6.js"},{"name":"optimism","loc":{"line":2,"column":21},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\core\\cache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\optimism\\lib\\bundle.esm.js"},{"name":"../../utilities/index.js","loc":{"line":3,"column":42},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\cache\\core\\cache.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloCache = void 0;\n\nvar _tslib = require(\"tslib\");\n\nvar _optimism = require(\"optimism\");\n\nvar _index = require(\"../../utilities/index.js\");\n\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = (0, _optimism.wrap)(_index.getFragmentQueryDocument);\n  }\n\n  ApolloCache.prototype.batch = function (options) {\n    var _this = this;\n\n    var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n    var updateResult;\n    this.performTransaction(function () {\n      return updateResult = options.update(_this);\n    }, optimisticId);\n    return updateResult;\n  };\n\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic: optimistic\n    }));\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic: optimistic\n    }));\n  };\n\n  ApolloCache.prototype.writeQuery = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        options = (0, _tslib.__rest)(_a, [\"id\", \"data\"]);\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data\n    }));\n  };\n\n  ApolloCache.prototype.writeFragment = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        fragment = _a.fragment,\n        fragmentName = _a.fragmentName,\n        options = (0, _tslib.__rest)(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data\n    }));\n  };\n\n  ApolloCache.prototype.updateQuery = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readQuery(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n\n  ApolloCache.prototype.updateFragment = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readFragment(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n\n  return ApolloCache;\n}();\n\nexports.ApolloCache = ApolloCache;"},"sourceMaps":null,"error":null,"hash":"6b5601b6666d262b300fd89a9a8fd83b","cacheData":{"env":{}}}