{"id":"DWrS","dependencies":[{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\package.json","includedInParent":true,"mtime":1640608262491},{"name":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\package.json","includedInParent":true,"mtime":1640596614404},{"name":"../globals/index.js","loc":{"line":1,"column":42},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\graphql\\getFromAST.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\globals\\index.js"},{"name":"./storeUtils.js","loc":{"line":2,"column":44},"parent":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\graphql\\getFromAST.js","resolved":"C:\\Users\\pakev\\Desktop\\r_widgets\\react-widgets\\node_modules\\@apollo\\client\\utilities\\graphql\\storeUtils.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkDocument = checkDocument;\nexports.getDefaultValues = getDefaultValues;\nexports.getFragmentDefinition = getFragmentDefinition;\nexports.getFragmentDefinitions = getFragmentDefinitions;\nexports.getMainDefinition = getMainDefinition;\nexports.getOperationDefinition = getOperationDefinition;\nexports.getOperationName = getOperationName;\nexports.getQueryDefinition = getQueryDefinition;\n\nvar _index = require(\"../globals/index.js\");\n\nvar _storeUtils = require(\"./storeUtils.js\");\n\nfunction checkDocument(doc) {\n  __DEV__ ? (0, _index.invariant)(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : (0, _index.invariant)(doc && doc.kind === 'Document', 44);\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw __DEV__ ? new _index.InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new _index.InvariantError(45);\n    }\n\n    return definition;\n  });\n  __DEV__ ? (0, _index.invariant)(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : (0, _index.invariant)(operations.length <= 1, 46);\n  return doc;\n}\n\nfunction getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\n\nfunction getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\n\nfunction getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\n\nfunction getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  __DEV__ ? (0, _index.invariant)(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : (0, _index.invariant)(queryDef && queryDef.operation === 'query', 47);\n  return queryDef;\n}\n\nfunction getFragmentDefinition(doc) {\n  __DEV__ ? (0, _index.invariant)(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : (0, _index.invariant)(doc.kind === 'Document', 48);\n  __DEV__ ? (0, _index.invariant)(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : (0, _index.invariant)(doc.definitions.length <= 1, 49);\n  var fragmentDef = doc.definitions[0];\n  __DEV__ ? (0, _index.invariant)(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : (0, _index.invariant)(fragmentDef.kind === 'FragmentDefinition', 50);\n  return fragmentDef;\n}\n\nfunction getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw __DEV__ ? new _index.InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new _index.InvariantError(51);\n}\n\nfunction getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        (0, _storeUtils.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n\n  return defaultValues;\n}"},"sourceMaps":null,"error":null,"hash":"5ac785da8fc1855202319ab52644ba7c","cacheData":{"env":{}}}